name: üîç ESLint Check

on:
  pull_request:
    branches: [main, dev]
    paths:
      - "Cardoon/**/*.ts"
      - "Cardoon/**/*.tsx"
      - "Cardoon/**/*.js"
      - "Cardoon/**/*.jsx"
      - "Cardoon/.eslintrc.*"
      - "Cardoon/eslint.config.*"
      - "Cardoon/package.json"
      - "Cardoon/package-lock.json"
      - ".github/workflows/lint.yml"
  push:
    branches: [main]

jobs:
  eslint:
    name: üîç ESLint Analysis
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./Cardoon

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v5

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "Cardoon/package-lock.json"

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Run ESLint
        run: npm run lint

      - name: üìä Run ESLint with JSON output (on failure)
        if: failure()
        run: npm run lint -- --format json --output-file eslint-results.json
        continue-on-error: true

      - name: üìã Comment PR with ESLint results
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const path = './Cardoon/eslint-results.json';

            if (fs.existsSync(path)) {
              const results = JSON.parse(fs.readFileSync(path, 'utf8'));
              const errors = results.filter(r => r.errorCount > 0);
              
              if (errors.length > 0) {
                let comment = '## üö® ESLint Issues Found\n\n';
                errors.forEach(file => {
                  comment += `### üìÑ ${file.filePath.replace(process.cwd() + '/Cardoon/', '')}\n`;
                  file.messages.forEach(msg => {
                    const severity = msg.severity === 2 ? '‚ùå' : '‚ö†Ô∏è';
                    comment += `- ${severity} Line ${msg.line}:${msg.column} - ${msg.message} \`${msg.ruleId || 'unknown'}\`\n`;
                  });
                  comment += '\n';
                });
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            }
